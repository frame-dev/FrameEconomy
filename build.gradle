import org.apache.tools.ant.filters.ReplaceTokens
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
}

wrapper {
    gradleVersion = '7.0'
}

apply plugin: "eclipse"
apply plugin: 'kotlin'
apply plugin: 'maven-publish'

group = 'de.framedev'
version = '1.9-RELEASE'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url "https://framedev.ch:444/releases/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.1-R0.1-SNAPSHOT'
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    shadow 'org.jetbrains.kotlin:kotlin-stdlib:1.4.31'
    shadow group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.10'
}

publishing{
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'de.framedev'
            artifactId 'FrameEconomy'
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath
    }
    repositories {
        maven {
            url "https://framedev.ch:444/releases/"
            credentials {
                username = 'root'
                password = 'Inside71'
            }
            // authentication {
            //    basic(BasicAuthentication)
            //}
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'de.framedev.frameeconomy.main.Main'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}

kotlin {
    /* Targets configuration omitted.
    *  To find out how to configure the targets, please follow the link:
    *  https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html#setting-up-targets */

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
    }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives packageJavadoc
    archives packageSources
}

shadowJar {
    archiveBaseName.set(baseName)
    archiveClassifier.set('')
    archiveVersion.set(version)
    archiveClassifier = ''
}